        {
            int[] tab = { 8, 7, 2, 1, 3, 5, 2 };
            MergeSort(tab, 0, tab.Length-1);
            
            string wynik = ToString(tab);
            MessageBox.Show(wynik);
        }
        void MergeSort(int[] T, int p, int r)
        {
            if (p < r)
            {
                int q = (p+r)/2;
                MergeSort(T, p, q);
                MergeSort(T,q+1,r);
                Scal(T, p, q, r);
            }
        }
        void Scal(int[] T, int p, int q, int r)
        {
            int n1 = q - p + 1;
            int n2 = r - q;
            int[] tabl = new int[n1];
            int[] tabr = new int[n2];

            for (int i = 0; i < n1; i++)
            {
                tabl[i] = T[p+i];
            }
            for (int j = 0; j< n2; j++)
            {
                tabr[j] = T[q+1+j];
            }
            //indeksy poczatkowe dla podtablic i glownej tablicy
            int iIndex = 0, jIndex = 0;
            int k = p;

            //scalanie tymczasowych tablic do glownej tablicy
            while(iIndex < n1 && jIndex < n2) {
            if (tabl[iIndex]<= tabr[jIndex])
                {
                    T[k] = tabl[iIndex];
                    iIndex++;
                }
            else
                {
                    T[k] = tabr[jIndex];
                    jIndex++;
                }
                k++;
            }
            //kopiowanie pozostalych elementow z lewej tablicy
            while(iIndex < n1)
            {
                T[k]= tabl[iIndex];
                iIndex++;
                k++;
            }
            //kopiowanie pozostalych elementow z prawej tablicy
            while (jIndex < n2)
            {
                T[k]= tabr[jIndex];
                jIndex++;
                k++;
            }
        }
